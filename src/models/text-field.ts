/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator.
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import type { CheckResult } from './check-result';
// May contain unused imports in some cases
// @ts-ignore
import type { CrossSourceValueComparison } from './cross-source-value-comparison';
// May contain unused imports in some cases
// @ts-ignore
import type { LCID } from './lcid';
// May contain unused imports in some cases
// @ts-ignore
import type { SourceValidity } from './source-validity';
// May contain unused imports in some cases
// @ts-ignore
import type { TextFieldType } from './text-field-type';
// May contain unused imports in some cases
// @ts-ignore
import type { TextFieldValue } from './text-field-value';

/**
 * 
 * @export
 * @interface TextField
 */
export interface TextField {
    /**
     * 
     * @type {TextFieldType}
     * @memberof TextField
     */
    'fieldType': TextFieldType;
    /**
     * Field name. Only use to search values for fields with fieldType=50(other). In general, use fieldType for lookup.
     * @type {string}
     * @memberof TextField
     */
    'fieldName': string;
    /**
     * 
     * @type {LCID}
     * @memberof TextField
     */
    'lcid': LCID;
    /**
     * LCID name
     * @type {string}
     * @memberof TextField
     */
    'lcidName'?: string;
    /**
     * 
     * @type {CheckResult}
     * @memberof TextField
     */
    'status': CheckResult;
    /**
     * 
     * @type {CheckResult}
     * @memberof TextField
     */
    'validityStatus': CheckResult;
    /**
     * 
     * @type {CheckResult}
     * @memberof TextField
     */
    'comparisonStatus': CheckResult;
    /**
     * The most confidence value, selected from valueList
     * @type {string}
     * @memberof TextField
     */
    'value': string;
    /**
     * 
     * @type {Array<TextFieldValue>}
     * @memberof TextField
     */
    'valueList': Array<TextFieldValue>;
    /**
     * Validity of all field values for given source. If there are two values on different pages for one field-source pair, then validity also will include logical match checking. If such values do not match, validity will return error.
     * @type {Array<SourceValidity>}
     * @memberof TextField
     */
    'validityList': Array<SourceValidity>;
    /**
     * 
     * @type {Array<CrossSourceValueComparison>}
     * @memberof TextField
     */
    'comparisonList': Array<CrossSourceValueComparison>;
}



